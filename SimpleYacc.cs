// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.3.6
// Machine:  MacBook-Pro-xittz
// DateTime: 07.03.2020 14:20:57
// UserName: xittz
// Input file <SimpleYacc.y>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace SimpleParser
{
public enum Tokens {
    error=1,EOF=2,BEGIN=3,END=4,INUM=5,RNUM=6,
    ID=7,ASSIGN=8,SEMICOLON=9,COMMA=10,FOR=11,OR=12,
    AND=13,EQUAL=14,NEQUAL=15,GREATER=16,LESS=17,LPAREN=18,
    RPAREN=19,WHILE=20,BOOL=21,IF=22,ELSE=23,PLUS=24,
    MINUS=25,MULT=26,DIV=27,MOD=28,VAR=29,PRINT=30,
    INPUT=31,GOTO=32};

// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<int,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

public class Parser: ShiftReduceParser<int, LexLocation>
{
  // Verbatim content from SimpleYacc.y
// ��� ���������� ����������� � ����� GPPGParser, �������������� ����� ������, ������������ �������� gppg
    public Parser(AbstractScanner<int, LexLocation> scanner) : base(scanner) { }
  // End verbatim content from SimpleYacc.y

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[48];
  private static State[] states = new State[93];
  private static string[] nonTerms = new string[] {
      "progr", "$accept", "block", "stlist", "statement", "assign", "for", "while", 
      "if", "var", "print", "input", "goto", "label", "ident", "expr", "exprb", 
      "exprlist", "varlist", };

  static Parser() {
    states[0] = new State(new int[]{3,4},new int[]{-1,1,-3,3});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(new int[]{7,24,3,4,11,51,20,59,22,63,29,69,30,75,31,83,32,88,5,90},new int[]{-4,5,-5,92,-6,9,-15,10,-3,49,-7,50,-8,58,-9,62,-10,68,-11,74,-12,82,-13,87,-14,91});
    states[5] = new State(new int[]{4,6,9,7});
    states[6] = new State(-3);
    states[7] = new State(new int[]{7,24,3,4,11,51,20,59,22,63,29,69,30,75,31,83,32,88,5,90},new int[]{-5,8,-6,9,-15,10,-3,49,-7,50,-8,58,-9,62,-10,68,-11,74,-12,82,-13,87,-14,91});
    states[8] = new State(-5);
    states[9] = new State(-6);
    states[10] = new State(new int[]{8,11});
    states[11] = new State(new int[]{7,24,5,47,18,48,21,34},new int[]{-16,12,-17,29,-15,23});
    states[12] = new State(new int[]{27,13,28,15,26,17,25,19,24,21,4,-17,9,-17});
    states[13] = new State(new int[]{7,24,5,25,18,26},new int[]{-16,14,-15,23});
    states[14] = new State(new int[]{27,13,28,15,26,17,25,19,24,21,4,-26,9,-26,19,-26,10,-26});
    states[15] = new State(new int[]{7,24,5,25,18,26},new int[]{-16,16,-15,23});
    states[16] = new State(new int[]{27,13,28,15,26,17,25,19,24,21,4,-27,9,-27,19,-27,10,-27});
    states[17] = new State(new int[]{7,24,5,25,18,26},new int[]{-16,18,-15,23});
    states[18] = new State(new int[]{27,13,28,15,26,17,25,19,24,21,4,-28,9,-28,19,-28,10,-28});
    states[19] = new State(new int[]{7,24,5,25,18,26},new int[]{-16,20,-15,23});
    states[20] = new State(new int[]{27,13,28,15,26,17,25,19,24,21,4,-29,9,-29,19,-29,10,-29});
    states[21] = new State(new int[]{7,24,5,25,18,26},new int[]{-16,22,-15,23});
    states[22] = new State(new int[]{27,13,28,15,26,17,25,19,24,21,4,-30,9,-30,19,-30,10,-30});
    states[23] = new State(-23);
    states[24] = new State(-16);
    states[25] = new State(-24);
    states[26] = new State(new int[]{7,24,5,25,18,26},new int[]{-16,27,-15,23});
    states[27] = new State(new int[]{19,28,27,13,28,15,26,17,25,19,24,21});
    states[28] = new State(-25);
    states[29] = new State(new int[]{12,30,13,32,4,-18,9,-18});
    states[30] = new State(new int[]{21,34,18,35,5,38},new int[]{-17,31});
    states[31] = new State(new int[]{12,30,13,32,4,-32,9,-32,19,-32,7,-32,3,-32,11,-32,20,-32,22,-32,29,-32,30,-32,31,-32,32,-32,5,-32});
    states[32] = new State(new int[]{21,34,18,35,5,38},new int[]{-17,33});
    states[33] = new State(new int[]{12,30,13,32,4,-33,9,-33,19,-33,7,-33,3,-33,11,-33,20,-33,22,-33,29,-33,30,-33,31,-33,32,-33,5,-33});
    states[34] = new State(-31);
    states[35] = new State(new int[]{21,34,18,35,5,38},new int[]{-17,36});
    states[36] = new State(new int[]{19,37,12,30,13,32});
    states[37] = new State(-34);
    states[38] = new State(new int[]{17,39,16,41,14,43,15,45});
    states[39] = new State(new int[]{5,40});
    states[40] = new State(-35);
    states[41] = new State(new int[]{5,42});
    states[42] = new State(-36);
    states[43] = new State(new int[]{5,44});
    states[44] = new State(-37);
    states[45] = new State(new int[]{5,46});
    states[46] = new State(-38);
    states[47] = new State(new int[]{17,39,16,41,14,43,15,45,27,-24,28,-24,26,-24,25,-24,24,-24,4,-24,9,-24,19,-24});
    states[48] = new State(new int[]{7,24,5,47,18,48,21,34},new int[]{-16,27,-17,36,-15,23});
    states[49] = new State(-7);
    states[50] = new State(-8);
    states[51] = new State(new int[]{7,24},new int[]{-15,52});
    states[52] = new State(new int[]{8,53});
    states[53] = new State(new int[]{5,54});
    states[54] = new State(new int[]{10,55});
    states[55] = new State(new int[]{5,56});
    states[56] = new State(new int[]{7,24,3,4,11,51,20,59,22,63,29,69,30,75,31,83,32,88,5,90},new int[]{-5,57,-6,9,-15,10,-3,49,-7,50,-8,58,-9,62,-10,68,-11,74,-12,82,-13,87,-14,91});
    states[57] = new State(-21);
    states[58] = new State(-9);
    states[59] = new State(new int[]{21,34,18,35,5,38},new int[]{-17,60});
    states[60] = new State(new int[]{12,30,13,32,7,24,3,4,11,51,20,59,22,63,29,69,30,75,31,83,32,88,5,90},new int[]{-5,61,-6,9,-15,10,-3,49,-7,50,-8,58,-9,62,-10,68,-11,74,-12,82,-13,87,-14,91});
    states[61] = new State(-22);
    states[62] = new State(-10);
    states[63] = new State(new int[]{21,34,18,35,5,38},new int[]{-17,64});
    states[64] = new State(new int[]{12,30,13,32,3,4},new int[]{-3,65});
    states[65] = new State(new int[]{23,66,4,-44,9,-44});
    states[66] = new State(new int[]{3,4},new int[]{-3,67});
    states[67] = new State(-43);
    states[68] = new State(-11);
    states[69] = new State(new int[]{7,24},new int[]{-19,70,-15,73});
    states[70] = new State(new int[]{10,71,4,-47,9,-47});
    states[71] = new State(new int[]{7,24},new int[]{-15,72});
    states[72] = new State(-46);
    states[73] = new State(-45);
    states[74] = new State(-12);
    states[75] = new State(new int[]{18,76});
    states[76] = new State(new int[]{7,24,5,25,18,26},new int[]{-18,77,-16,81,-15,23});
    states[77] = new State(new int[]{19,78,10,79});
    states[78] = new State(-39);
    states[79] = new State(new int[]{7,24,5,25,18,26},new int[]{-16,80,-15,23});
    states[80] = new State(new int[]{27,13,28,15,26,17,25,19,24,21,19,-42,10,-42});
    states[81] = new State(new int[]{27,13,28,15,26,17,25,19,24,21,19,-41,10,-41});
    states[82] = new State(-13);
    states[83] = new State(new int[]{18,84});
    states[84] = new State(new int[]{7,24},new int[]{-15,85});
    states[85] = new State(new int[]{19,86});
    states[86] = new State(-40);
    states[87] = new State(-14);
    states[88] = new State(new int[]{5,90},new int[]{-14,89});
    states[89] = new State(-20);
    states[90] = new State(-19);
    states[91] = new State(-15);
    states[92] = new State(-4);

    rules[1] = new Rule(-2, new int[]{-1,2});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-3, new int[]{3,-4,4});
    rules[4] = new Rule(-4, new int[]{-5});
    rules[5] = new Rule(-4, new int[]{-4,9,-5});
    rules[6] = new Rule(-5, new int[]{-6});
    rules[7] = new Rule(-5, new int[]{-3});
    rules[8] = new Rule(-5, new int[]{-7});
    rules[9] = new Rule(-5, new int[]{-8});
    rules[10] = new Rule(-5, new int[]{-9});
    rules[11] = new Rule(-5, new int[]{-10});
    rules[12] = new Rule(-5, new int[]{-11});
    rules[13] = new Rule(-5, new int[]{-12});
    rules[14] = new Rule(-5, new int[]{-13});
    rules[15] = new Rule(-5, new int[]{-14});
    rules[16] = new Rule(-15, new int[]{7});
    rules[17] = new Rule(-6, new int[]{-15,8,-16});
    rules[18] = new Rule(-6, new int[]{-15,8,-17});
    rules[19] = new Rule(-14, new int[]{5});
    rules[20] = new Rule(-13, new int[]{32,-14});
    rules[21] = new Rule(-7, new int[]{11,-15,8,5,10,5,-5});
    rules[22] = new Rule(-8, new int[]{20,-17,-5});
    rules[23] = new Rule(-16, new int[]{-15});
    rules[24] = new Rule(-16, new int[]{5});
    rules[25] = new Rule(-16, new int[]{18,-16,19});
    rules[26] = new Rule(-16, new int[]{-16,27,-16});
    rules[27] = new Rule(-16, new int[]{-16,28,-16});
    rules[28] = new Rule(-16, new int[]{-16,26,-16});
    rules[29] = new Rule(-16, new int[]{-16,25,-16});
    rules[30] = new Rule(-16, new int[]{-16,24,-16});
    rules[31] = new Rule(-17, new int[]{21});
    rules[32] = new Rule(-17, new int[]{-17,12,-17});
    rules[33] = new Rule(-17, new int[]{-17,13,-17});
    rules[34] = new Rule(-17, new int[]{18,-17,19});
    rules[35] = new Rule(-17, new int[]{5,17,5});
    rules[36] = new Rule(-17, new int[]{5,16,5});
    rules[37] = new Rule(-17, new int[]{5,14,5});
    rules[38] = new Rule(-17, new int[]{5,15,5});
    rules[39] = new Rule(-11, new int[]{30,18,-18,19});
    rules[40] = new Rule(-12, new int[]{31,18,-15,19});
    rules[41] = new Rule(-18, new int[]{-16});
    rules[42] = new Rule(-18, new int[]{-18,10,-16});
    rules[43] = new Rule(-9, new int[]{22,-17,-3,23,-3});
    rules[44] = new Rule(-9, new int[]{22,-17,-3});
    rules[45] = new Rule(-19, new int[]{-15});
    rules[46] = new Rule(-19, new int[]{-19,10,-15});
    rules[47] = new Rule(-10, new int[]{29,-19});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
